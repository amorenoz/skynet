#!/bin/bash
set -e

SCRIPT_FILE=`realpath -s $0`
SCRIPTS=`dirname ${SCRIPT_FILE}`
. ${SCRIPTS}/common

# GLOBAL_VARS
SKYDIVE_REV="${SKYDIVE_REV:-master}"
SKYDIVE_REPO="${SKYDIVE_REPO:-default}"
SKYDIVE_IMG=skydive:devel
#K8S_VERSION=v1.14.10

usage(){
    echo "Usage: $0 [options] command [command options]"
    echo ""
    echo "commands:"
    echo "  create:         Create a Lab instance with KIND + OVS"
    echo "  clean:          Clean up the lab"
    echo "  start:          Start the lab. After this, skydive and ovnkube will be up&running"
    echo "  stop:           Stop the lab"
    echo "  apply:          Apply the local changes performed on $WORKDIR/go/src/skydive-project/skydive"
    echo ""
    echo "general options:"
    echo "  -h:              Display this help message"
    echo "  -v:              Be verbose"
    echo "Env vars:"
    echo "  SKYDIVE_WORKDIR:          Use the specified path as working directory. Default ${DEFAULT_WORKDIR}"
}

do_clean() {
    do_stop 
    info "Cleaning working directory"
    go clean --modcache
    rm -rf $WORKDIR/go/src/github.com/ovn-org/ovn-kubernetes
    docker rmi ovn-kube-f
    info "Removing kubeconfig"
    rm -f $HOME/admin.conf
}

do_create () {
    # Check docker is installed and running
    docker version > /dev/null || (error "Docker not installed"; exit 1)
    # Check go is installed
    go version > /dev/null || (error "Go not installed"; exit 1)

    # Get Kind
    info "Getting KIND"
    curl -Lo $WORKDIR/kind "https://kind.sigs.k8s.io/dl/v0.8.1/kind-$(uname)-amd64"
    chmod +x $WORKDIR/kind
    export PATH="$PATH:$WORKDIR"

    info "Installing kubectl"
    which kubectl >/dev/null || (
    cat > /etc/yum.repos.d/kubernetes.repo <<EOF
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
EOF
    sudo dnf install -y kubectl
    )

    info "Opening port 11337 in the firewall"
    sudo firewall-cmd --add-port=11337/tcp
    sudo firewall-cmd --reload

    info "Building ovn-k8s"
    go get github.com/ovn-org/ovn-kubernetes | true
    pushd $GOPATH/src/github.com/ovn-org/ovn-kubernetes
      pushd go-controller
      make
      popd
      pushd dist/images
      make fedora
      popd

      info "Disable SCTPSupport"
      sed -i '/SCTPSupport.*/d' contrib/kind.yaml.j2
      sed -i '/featureGates.*/d' contrib/kind.yaml.j2
    popd # ovn-kubernetes
}

do_apply() {
    export KUBECONFIG=$HOME/admin.conf
    kubectl delete -f deployments/skydive.yaml || true
    info "Re-building skydive"
    make clean
    info "Re-building skydive"
    make k8s
    info "Loading new image ${SKYDIVE_IMG}"
    kind load docker-image ${SKYDIVE_IMG} --name ovn
    info "Deploying skydive"
    kubectl apply -f deployments/skydive.yaml
}

do_start() {
    info "Starting kind + ovn"
    pushd "$GOPATH/src/github.com/ovn-org/ovn-kubernetes/contrib"
    (
        K8S_VERSION=$K8S_VERSION KIND_INSTALL_INGRESS=true PATH="$PATH:$WORKDIR" ./kind.sh
    )
    popd

    info "Loading locally built image $SKYDIVE_IMG"
    kind load docker-image ${SKYDIVE_IMG} --name ovn

    info "Deploying skydive"
    export KUBECONFIG=$HOME/admin.conf
    kubectl apply -f deployments/skydive.yaml
    info "Waiting 10s until skydive gets deployed"
    sleep 10
    info "Skydive should be ready"
    echo ""
    info "Access your cluster by adding the following variable to your env:"
    info "export KUBECONFIG=$HOME/admin.conf"
    echo ""
}

do_stop() {
    echo "Stopping the lab"
    pushd "$GOPATH/src/github.com/ovn-org/ovn-kubernetes/contrib"
    (
        K8S_VERSION=$K8S_VERSION KIND_INSTALL_INGRESS=true PATH="$PATH:$WORKDIR" ./kind.sh --delete
    )
    popd
}

do_forward() {
    export KUBECONFIG=$HOME/admin.conf
    info "Forwaring UI ports. You can access the UI on localhost:8082"
    info "Feel free to move this process to the background..."
    kubectl port-forward --namespace skydive service/skydive-analyzer 8082 9200
}


## Main
while getopts "hv" opt; do
    case ${opt} in
        h )
            usage
            exit 0
            ;;
        v )
            set -x
            ;;
        \? )
            echo "Invalid option: -$OPTARG" 1>&2
            exit 1
            ;;
    esac
done

common_init

export GOPATH=${WORKDIR}/go

# Get command
shift $((OPTIND -1))
CMD=$1
if [ -z "${CMD}" ]; then
    usage
    exit 1
fi
shift

case $CMD in
    start)
        do_start $@
        ;;
    stop)
        do_stop $@
        ;;
    create)
        do_create $@
        ;;
    clean)
        do_clean $@
        ;;
    forward)
        do_forward $@
        ;;
    apply)
        do_apply $@
        ;;
    *)
        echo "Invalid command $CMD" 1>&2
        exit 1
        ;;
esac
