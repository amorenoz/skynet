#!/bin/bash
set -e

# GLOBAL_VARS
SCRIPT=`realpath -s $0`
SCRIPTPATH=`dirname $SCRIPT`
WORKDIR="$PWD/fdp-skydive"
#K8S_VERSION=v1.14.10

usage(){
    echo "Usage: $0 [options] command [command options]"
    echo ""
    echo "commands:"
    echo "  create:         Create a Lab instance with KIND + OVS + SKYDIVE"
    echo "  clean:          Clean up the lab"
    echo "  up:             Start the lab"
    echo "  down:           Stop the lab"
    echo "  forward:        Foward the UI ports (needed for Skydive UI and Kibana dashboard)"
    echo "  kibana:         Start a Kibana container to inspect the ElasticSearch database directly"
    echo ""
    echo "general options:"
    echo "  -h:             Display this help message"
    echo "  -v:             Be verbose"
    echo "  -w WORKDIR:     Use the specified path as working directory. Default \$PWD/fdp-skydive/"
}

error() {
    echo "[error] $@"
}

info() {
    echo "[info] $@"
}

do_clean() {
    do_down
    info "Cleaning working directory"
    rm -rf $WORKDIR
    docker rmi ovn-kube-f
    info "Removing kubeconfig"
    rm -f $HOME/admin.conf
}

do_create () {
    # Check docker is installed and running
    docker version > /dev/null || (error "Docker not installed"; exit 1)
    # Check go is installed
    go version > /dev/null || (error "Docker not installed"; exit 1)

    # Get Kind
    info "Getting KIND"
    curl -Lo $WORKDIR/kind "https://kind.sigs.k8s.io/dl/v0.8.1/kind-$(uname)-amd64"
    chmod +x $WORKDIR/kind
    export PATH="$PATH:$WORKDIR"

    info "Installing kubectl"
    which kubectl >/dev/null || (
    cat > /etc/yum.repos.d/kubernetes.repo <<EOF 
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
EOF
    sudo dnf install -y kubectl 
    )

    info "Opening port 11337 in the firewall"
    sudo firewall-cmd --add-port=11337/tcp
    sudo firewall-cmd --reload
    
    info "Building ovn-k8s"
    go get github.com/ovn-org/ovn-kubernetes | true
    pushd $GOPATH/src/github.com/ovn-org/ovn-kubernetes
      pushd go-controller
      make
      popd
      pushd dist/images
      make fedora
      popd

      info "Disable SCTPSupport"
      sed -i '/SCTPSupport.*/d' contrib/kind.yaml.j2
      sed -i '/featureGates.*/d' contrib/kind.yaml.j2
    popd # ovn-kubernetes

    info "Gettin Skydive"
    pushd $WORKDIR
      git clone https://github.com/amorenoz/skydive.git
      pushd skydive
        git checkout poc-ovn
      popd
    popd 
    
}

do_up() {
    info "Starting kind + ovn"
    pushd "$GOPATH/src/github.com/ovn-org/ovn-kubernetes/contrib"
    (
        K8S_VERSION=$K8S_VERSION KIND_INSTALL_INGRESS=true PATH="$PATH:$WORKDIR" ./kind.sh
    )
    popd
    info "Deploying skydive"
    export KUBECONFIG=$HOME/admin.conf
    kubectl apply -f $WORKDIR/skydive/contrib/kubernetes/skydive.yaml
    info "Waiting 10s until skydive gets deployed"
    sleep 10
    info "Skydive should be ready"
    echo ""
    info "Access your cluster by adding the following variable to your env:"
    info "export KUBECONFIG=$HOME/admin.conf"
}

do_down() {
    echo "Stopping the lab"
    pushd "$GOPATH/src/github.com/ovn-org/ovn-kubernetes/contrib"
    (
        K8S_VERSION=$K8S_VERSION KIND_INSTALL_INGRESS=true PATH="$PATH:$WORKDIR" ./kind.sh --delete
    )
    popd
    docker stop skydive-kibana > /dev/null || true
    docker rm skydive-kibana > /dev/null || true
}

do_forward() {
    export KUBECONFIG=$HOME/admin.conf
    info "Forwaring UI ports. You can access the UI on localhost:8082"
    info "Feel free to move this process to the background..."
    kubectl port-forward --namespace ovn-kubernetes service/skydive-analyzer 8082 9200
}

do_kibana() {
    info "Starting Kibana Container"
    docker run -d --network="host" --name skydive-kibana --env ELASTICSEARCH_HOSTS="http://localhost:9200" -p 5601:5601 docker.elastic.co/kibana/kibana:7.8.0
    info "...done. Kibana dashboard should be accessible (in around 30s) at localhost:5601"
}

## Main
while getopts "hvw:" opt; do
    case ${opt} in
        h )
            usage
            exit 0
            ;;
        v )
            set -x
            ;;
        w )
            WORKDIR=$(realpath $OPTARG)
            ;;
        \? )
            echo "Invalid option: -$OPTARG" 1>&2
            exit 1
            ;;
    esac
done

# Get command
shift $((OPTIND -1))
CMD=$1
if [ -z "${CMD}" ]; then
    usage
    exit 1
fi
shift

# Common initialization
mkdir -p "$WORKDIR" > /dev/null || true
export GOPATH=$WORKDIR/go

case $CMD in
    up)
        do_up $@
        ;;
    down)
        do_down $@
        ;;
    create)
        do_create $@
        ;;
    clean)
        do_clean $@
        ;;
    forward)
        do_forward $@
        ;;
    kibana)
        do_kibana $@
        ;;
    *)
        echo "Invalid command $CMD" 1>&2
        exit 1
        ;;
esac
